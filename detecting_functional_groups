#Some of the methods used are from this open source book: https://weisscharlesj.github.io/SciCompforChemists/notebooks/chapter_15/chap_15_notebook.html 
#Most importantly, I used the content in Chapter 15 of the book to draw the structures and detect the functional groups.


#installing rdkit
!pip install rdkit
!pip install pubchempy
!pip install cirpy

#importing the necessary libraries
from rdkit import Chem
from rdkit.Chem import AllChem, Descriptors
from rdkit.Chem.Draw import IPythonConsole
import cirpy
from rdkit.Chem.Draw import SimilarityMaps
from rdkit.Chem import rdFingerprintGenerator

molecule= input ("Enter the compound ")
smiles= cirpy.resolve (molecule, "smiles")
mol= Chem.MolFromSmiles (smiles)
Chem.Draw.MolToImage(mol, size=(800,400))

functional_groups = {
    "phenol groups": Descriptors.fr_phenol,
    "thiol groups": Descriptors.fr_SH,
    "phosphoric ester groups": Descriptors.fr_phos_ester,
    "halogens": Descriptors.fr_halogen,
    "aromatic carboxylic acid groups": Descriptors.fr_Ar_COO,
    "ether oxygen groups": Descriptors.fr_ether,
    "ketone groups": Descriptors.fr_ketone,
    "carboxylic acid groups": Descriptors.fr_COO,
    "ester groups": Descriptors.fr_COO2,
    "amidine groups": Descriptors.fr_amidine,
    "nitro groups": Descriptors.fr_nitro,
    "nitrile groups": Descriptors.fr_nitrile,
    "azide groups": Descriptors.fr_azide,
    "epoxide groups": Descriptors.fr_epoxide,
    "alcohol groups": Descriptors.fr_Al_OH,
    "tertiary amine groups": Descriptors.fr_NH0,
    "benzene rings": Descriptors.fr_benzene,
    "aldehyde groups": Descriptors.fr_aldehyde,
    "amide groups": Descriptors.fr_amide
}

for key, descriptor_func in functional_groups.items():
    if descriptor_func(mol) != 0:
      print ("There are",  descriptor_func(mol), key)
